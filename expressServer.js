const http = require('http');
const fs = require('fs');
const path = require('path');
const swaggerUI = require('swagger-ui-express');
const jsYaml = require('js-yaml');
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');
const logger = require('./logger');
const { getAvailableBundleDeals, applyDeal, editProduct, createProduct, getProducts_1, getAvailableDeals, deleteProduct, clearActiveDeals } = require('./controllers/ManagerController');
const { updateBasket, addToBasket, getProducts, getTotal, removeAll } = require('./controllers/ShopperController');

class ExpressServer {
  constructor(port, openApiYaml) {
    this.port = port;
    this.app = express();
    this.openApiPath = openApiYaml;
    try {
      this.schema = jsYaml.safeLoad(fs.readFileSync(openApiYaml));
    } catch (e) {
      logger.error('failed to start Express Server', e.message);
    }
    this.setupMiddleware();
  }

  setupMiddleware() {
    this.app.use(cors());
    this.app.use(bodyParser.json({ limit: '14MB' }));
    this.app.use(express.json());
    this.app.use(express.urlencoded({ extended: false }));
    this.app.use(cookieParser());
    //Send the openapi document *AS GENERATED BY THE GENERATOR*
    this.app.get('/openapi', (req, res) => res.sendFile((path.join(__dirname, 'api', 'openapi.yaml'))));
    //View the openapi document in a visual interface. Should be able to test from this page
    this.app.use('/swagger-ui', swaggerUI.serve, swaggerUI.setup(this.schema));

    //Shopper endpoints
    this.app.put('/shop/updateQuantity', (req, res) => {
      updateBasket(req, res)
    });

    this.app.post('/shop/addToBasket', (req, res) => {
      addToBasket(req, res)
    });

    this.app.get('/shop/getProducts', (req, res) => {
      getProducts(req, res)
    });

    this.app.get('/shop/basketTotal', (req, res) => {
      getTotal(req, res)
    });

    this.app.delete('/shop/removeAll/:id', (req, res) => {
      removeAll(req, res)
    });

    //Manager endpoints
    this.app.post('/manage/editProduct', (req, res) => {
      editProduct(req, res)
    });
    
    this.app.post('/manage/createProduct', (req, res) => {
      createProduct(req, res)
    });

    this.app.post('/manage/applyDeal', (req, res) => {
      applyDeal(req, res)
    });

    this.app.get('/manage/getProducts', (req, res) => {
      getProducts_1(req, res)
    });

    this.app.get('/manage/availableDeals', (req, res) => {
      getAvailableDeals(req, res)
    });

    this.app.get('/manage/availableBundleDeals', (req, res) => {
      getAvailableBundleDeals(req, res)
    });

    this.app.delete('/manage/deleteProduct', (req, res) => {
      deleteProduct(req, res)
    });

    this.app.delete('/manage/clearActiveDeals', (req, res) => {
      clearActiveDeals(req, res)
    });
  }

  launch() {
    // new OpenApiValidator({
    //   apiSpec: this.openApiPath,
    //   operationHandlers: path.join(__dirname),
    //   fileUploader: { dest: config.FILE_UPLOAD_PATH },
    // }).install(this.app)
    //   .catch(e => console.log(e))
    //   .then(() => {
    //     // eslint-disable-next-line no-unused-vars
    //     this.app.use((err, req, res, next) => {
    //       // format errors
    //       res.status(err.status || 500).json({
    //         message: err.message || err,
    //         errors: err.errors || '',
    //       });
    //     });

    //     http.createServer(this.app).listen(this.port);
    //     console.log(`Listening on port ${this.port}`);
    //   });

      http.createServer(this.app).listen(this.port);
      console.log(`Listening on port ${this.port}`);
  }


  async close() {
    if (this.server !== undefined) {
      await this.server.close();
      console.log(`Server on port ${this.port} shut down`);
    }
  }
}

module.exports = ExpressServer;
